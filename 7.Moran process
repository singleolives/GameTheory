#https://www.youtube.com/watch?v=aD9JX1BqM5Y&list=PLnC5h3PY-znw_SyhvDO3-yH_EWB5z0w_8&index=8
    #Moran Process with Numpy
    #Instead of infinate population, it's finite
import numpy as np 
import matplotlib.pyplot as plt

def moran(N, game, i=1, seed=0):
    np.random.seed(seed)
    population = [0 for _ in range(i)] + [1 for _ in range(N - i)]
    counts = [(population.count(0), population.count(1))]

    while len(set(population)) == 2:
        scores = np.zeros(N)  # Initialize scores for each player

        for i, player in enumerate(population):
            for j, opponent in enumerate(population):
                if i != j:
                    scores[i] += game[player, opponent]

        total_score = sum(scores)
        probabilities = scores / total_score
        reproduce_index = np.random.choice(range(N), p=probabilities)
        eliminate_index = np.random.randint(N)
        population[eliminate_index] = population[reproduce_index]
        counts.append((population.count(0), population.count(1)))

    return counts

N = 8
A = np.array([[4, 1], [1, 4]])
counts = moran(N = N, game = A)
print(counts)
